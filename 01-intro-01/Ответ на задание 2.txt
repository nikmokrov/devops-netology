### Николай Мокров - DEVOPS-22. Ответ на задание №2
1. Работу начинаем с планирования. Задач много, поэтому менеджер расставляет
приоритеты по задачам, т.к. он общается напрямую с клиентами и лучше всех знает их нужды.
Разработчики могут внести коррективы исходя из того, сколько времени потребуется на реализацию и как  
это повлияет на проект в целом. Вероятно, при прочих равных, лучше выбрать более простую в реализации фичу,
т.к. останется больше времени на правку багов или взять задачу, которая сильнее повлияет на проект в целом. 
Крупные ошибки, а они неизбежны, нужно совершать как можно раньше, тогда цена их исправления меньше.
Выбираем самую важную задачу на текущий спринт.
2. Разработчики разбирают задачу на отдельные модули для каждого и начинают писать код. Ежедневно 
проводят короткие совещания для синхронизации, чтобы каждый понимал, кто что делает, кто отстает, 
кому нужна помощь. По мере готовности делают ревью кода друг друга, пишут юнит-тесты.
3. Тестировщики одновременно с разработчиками начинают готовить тесты. Заранее прикидывают
возможные узкие места, где могут возникнуть наиболее вероятные и дорогостоящие ошибки. Пишут тесты.
4. DevOps-инженер в то же время готовит новое тестовое окружение, среду для проверки работоспособности 
нового функционала. Это в основе своей копия "боевого" окружения, тот же состав и версии ПО, те же настройки,
но без реальных данных или с минимально необходимым их количеством (это может быть тестовый набор данных), 
чтобы не занимать лишние вычислительные ресурсы "железа" и минимизировать риск утечки реальных данных. 
По возможности, DevOps заранее вносит необходимые изменения в систему мониторинга, добавляет новые метрики,
чтобы новый функционал сразу встал на мониторинг.
5. Разработчики написали код и выложили его в тестовую ветку СКВ. Подготовленный DevOps-инженером процесс 
разместил код в тестовом окружении и запустил тесты, которые подготовили тестировщики.
6. По результатам тестирования принимаются решения о правке багов в рамках текущего спринта или, если они
не критичные, а времени мало, переносе в следуюший.
7. Тесты прошли, менеджер убедился, что необходимый функционал реализован, и принял решение - 
можно разворачивать в продакшен - "боевую" среду, которая обслуживает непосредственно клиентов. Для этого также 
отрабатывают процессы автоматического развертывания, которые подготовил DevOps.
8. Проводим ретроспективу того, как прошел спринт, что можно улучшить, какие были допущены ошибки и как можно
было их избежать.
9. Начала поступать информация от системы мониторинга. DevOps начал ее анализировать, как изменилась нагрузка,
появились ли узкие места, есть ли необходимость изменить настройки окружения, добавить или убрать задействованные
ресурсы "железа".
10. Если внезапно появилась критичная ошибка в продакшене, DevOps готов в ближайшее "технологическое окно"
откатить версию и восстановить работоспособность продукта.
11. Одновременно пошла обратная связь от клиентов, что нравится или не нравится, менеджер собирает отзывы,
 анализирует их и готовит задачи на новый спринт.
 
